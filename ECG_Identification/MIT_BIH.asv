% 保存大于1/2阈值的极大值对个数
% 保存小于正常阈值，大于1/2阈值的零点个数
% 保存表示R峰的零点个数
% 保存第一个检测到的R峰位置在R峰记录中的位置
% 保存漏检的R峰个数
% 实验验证：编号为100、103、105、113、115、116、117、219、220、234的数据运行起来较正常
% 166不行, 波形本身偏差太大
clear class_train;
clear class_test;

clear
clc

fs = 360;
sfreq = fs;
class_val = [];
class_test = [];
morph_feature_train = [];  % store the morphological parameters
morph_feature_val = [];
morph_feature_test = [];
morph_class_train = [];
morph_class_val = [];
morph_class_test = [];
num_train = zeros(1,10);
num_val = zeros(1,10);
num_test = zeros(1,10);
if exist('MIT_BIH_data.mat','file') == 2
    disp('$> File MIT_BIH_data.mat has been existed, delete it...');
    delete MIT_BIH_data.mat;
end
arrhy_path = 'matlab_data/MIT_BIH_Arrhythmia';
data_path = arrhy_path;
for class = 1:10
% for class = 8:8
    la=[100 103 231 113 115 221 117 219 220 234];
    [M,ATRTIMED]=rddata(la(class),data_path);   %将MIT-BIH上的数据转换成矩阵格式

    % raws=M(1:65536,1);    % 取第一组数据的前65536个数,分解后的cd3长度为8194
    raws=M(1:65536*8,1);    % 取第一组所有数据
    
    TIME = 1:length(raws);

    Y1 = zeros(1,length(raws)-1);
    Y2 = zeros(1,length(raws)-2);
    Y3 = zeros(1,length(raws)-2);
    Y4 = zeros(1,length(raws)-2);
    for n=2:length(raws)-1
        Y1(n)=raws(n+1)-raws(n-1);          %一阶导数
    end
    for n=3:length(raws)-2
        Y2(n)=raws(n+2)-2*raws(n)+raws(n-2);   %二阶导数
    end
    max1=max(Y1);
    max2=max(Y2);
    for n=3:length(raws)-2
        Y3(n)=max1*Y1(n)+max2*Y2(n);
    end
    a=0.1;
    max3=max(Y3);
    QRS=[];
    for i=3:length(raws)-2
        if Y3(i)>max3*a
           Y4(i)=1;
           QRS=[QRS,i];
        else
           Y4(i)=0;
        end
    end

    for i=3:length(raws)-3
        if (Y4(i)==1&&Y4(i-1)==0&&Y4(i+1)==0)
            Y4(i)=0;
        end
    end
    
   for i=3:length(raws)-98
        if (Y4(i)==0 && Y4(i-1)==1)
            for j=1:96
                if Y4(i+j)==1
                   Y4(i)=1;
                   break;
                end
            end
        end
   end 
    
    B=[];
    for i=3:length(raws)-3                  %找出QRS波群的起始点
        if (Y4(i)==1&&Y4(i-1)==0)
            B=[B,i];
        elseif (Y4(i)==1&&Y4(i+1)==0)
            B=[B,i];
        end
    end
    s=size(B);
    W=[];
    MAXR=[];
    for j=1:2:s(2)-2
         a=B(j);
         b=B(j+1);
         [maxR,w0]=max(raws(a:b,1));  %找出QRS波群内幅值最大的一点，即为R峰
         w=a+w0-1;                %得出的最大值的位置是以a开头向后数（w0-1）位
         W=[W,w]; 
         MAXR=[MAXR,maxR];
    end
    [maxRL,w0L]=max(raws(B(s(2)-1):end,1));   %最后一个QRS波群是不完整的，再对Y4进行处理2时，算不到最后的98个点
    wL=B(s(2)-1)+w0L-1;
    W=[W,wL];
    MAXR=[MAXR,maxRL];

%     dsum=[];
    dsum = zeros(1,length(raws)-1);
    for n=2:length(raws)-1
        d=Y1(n).^2;
%         dsum=[dsum,d];
        dsum(n) = d;
    end
    dert=sum(dsum)/(length(raws)-2);  %方差
    se=26*dert;
    
    Rnum=size(W);
    Rstart=[];
    for i=1:Rnum(2)
        s1=0;     
        for j=(W(i)-1):-1:1
            if abs(Y1(j))>se
                s1=j;        %R峰左边斜率首先超过se线的点为起点s1
                break;
            end
        end
        for m=s1:-1:1
            if (abs(Y1(m))<se)     %第一个斜率穿过se线的即为R峰起点
                Rstart=[Rstart,m]; % Rstart没有问题
                break;
            end
        end 
    end
    
    RSnum=size(Rstart);
    Q=[];
    for i=1:RSnum(2)
        for j=Rstart(i):-1:1
            if (Rstart(i)-j)<0.04*sfreq                             %由R峰起点向前0.04s内（因为Q波的宽度小于0.04s）
                if (abs(raws(j))>=abs(raws(j-1))&&abs(raws(j))>=abs(raws(j+1))) %第一个绝对值极大值即为Q峰 
                    Q=[Q,j];
                    break;  % Q没有问题
                end
            end
        end
    end
    
    Rend=[];
    for i=1:Rnum(2)-1
        s2=0;
        c1=0;
        c2=2;
        for j=(W(i)+1):length(raws)-1
            if abs(Y1(j))>se  %R峰右边斜率首先超过se线的点为起点s2
                s2=j;
                break;
            end
        end
        for k=(s2+1):length(raws)-2
            if (abs(Y1(k))>se&&abs(Y1(k+1))<se) %第一个自下而上穿越-se线的即为R峰终点
                c2=k;
                break;
            end
        end
        Rend=[Rend,c2];
    end
    
    REnum=size(Rend);
    S=[];
    for i=1:REnum(2)
        for j=Rend(i):length(raws)-1
            if (j-Rend(i))<0.06*sfreq                               %由R峰终点向后0.06s内（因为S波的宽度小于0.06s）
                if (abs(raws(j))>=abs(raws(j-1))&&abs(raws(j))>=abs(raws(j+1))) %第一个绝对值极大值即为S峰 
                    S=[S,j];
                    break;
                end
            end
        end
    end
    
    Snum=size(S);
    Send=[];
    for i=1:Snum(2)
        for j=S(i):length(raws)-2
            if (abs(Y1(j))>=abs(Y1(j+1))&&abs(Y1(j))>=abs(Y1(j-1)))  %S峰之后第一个斜率的绝对值极大值点即为S峰终点
                Send=[Send,j];
                break;
            end
        end
    end 
    
    Qnum=size(Q,2);
    Qstart=[];
    for i=1:Qnum
        for j=Q(i):-1:1
            if (abs(Y1(j))>=abs(Y1(j+1))&&abs(Y1(j))>=abs(Y1(j-1))) %Q峰之前第一个斜率的绝对值极大值点即为Q峰起点
                Qstart=[Qstart,j];
                break;
            end
        end
    end
    
    for i=10:length(raws)
        X1(i)=(raws(i)+raws(i-1)+raws(i-2)+raws(i-3)+raws(i-4)+raws(i-5)+raws(i-6)+raws(i-7)+raws(i-8)+raws(i-9))/10;
    end
    
    wsum=0;
    for i=2:Rnum(2)
        wsum=wsum+W(i)-W(i-1);
    end
    
    RRavi=wsum/(Rnum(2)-1);
    RRav=RRavi/sfreq;
    if RRav>0.7
        bw=0.03*sfreq;
        ew=0.4*sfreq;
    else 
        bw=0.02*sfreq;
        ew=0.4*RRav*sfreq;
    end
    
    wstart=round(Send+bw); %S峰之后的窗
    wend=round(Send+ew);
    T=[];
    SEnum=size(Send);
    for i=1:SEnum(2)
        if wend(i) <= length(X1)
            [tmax,t0]=max(X1(1,wstart(i):wend(i)));  %窗内心电信号的最大值即为T峰
        else
            [tmax,t0]=max(X1(1,wstart(i):end));
        end
        t=wstart(i)+t0-1;
        T=[T,t];
    end
    
    disp('$> Getting T_peak location done');
    
%     w1start=round(Qstart-ew); %Q峰之前的窗
%     w1end=round(Qstart-bw);
%     if w1start(1)<0
%         w1start(1)=1;
%     end
%     P=[];
%     QSnum=size(Qstart);
%     for i=1:QSnum(2)
%         [pmax,p0]=max(X1(1,w1start(i):w1end(i)));  %窗内心电信号的最大值即为P峰
%         p=w1start(i)+p0-1;
%         P=[P,p];
%     end

  
    disp('$> Start getting morphological features...')
    src_dat = raws;
    dat_flt = kfilter(src_dat, floor(fs/50));    % 50代表工频, 滤掉50Hz工频信号
    lin_seg = kfilter(dat_flt, floor(fs/20));    % 继续滤波, 得到QRS边界
    tmp_diff = dat_flt - lin_seg;

    [~, qrs_on, ~, qrs_num] = qrs_boundary_v3(tmp_diff, fs);  % 得到QRS波的数量和位置
    qrs_on2 = qrs_on;
    qrs_int = zeros(qrs_num - 1, 1);   % 取出qrs_num-1个完整波形
    for i = 1 : qrs_num - 1
        qrs_int(i) = qrs_on(i + 1) - qrs_on(i);   % 每个完整心电信号周期的长度
    end

    lin_seg = kfilter(dat_flt, floor(mean(qrs_int) / 20));
    tmp_diff = dat_flt - lin_seg;
    [qrs_mask, qrs_on, qrs_off, qrs_num] = qrs_boundary_v3(tmp_diff, fs);  % 得到更加精准的QRS波形起点终点坐标
 
    qrs_on1 = qrs_on;
    T1 = T;
    
    merge_qrs_t = merge_qrst(qrs_on,qrs_off,qrs_num,T);    
    qrs_on = merge_qrs_t(:,1);
    qrs_off = merge_qrs_t(:,2);
    T = merge_qrs_t(:,3);
    qrs_num = length(qrs_on);
    
    dat_merge = mymerge(lin_seg, src_dat, src_dat, qrs_mask);   % 将二次滤波的线性数据与未处理的元数据QRS部分融合
    qrs_width = qrs_off - qrs_on;
    dat_smo = kfilter(dat_merge, floor(mean(qrs_width) / 10));  % 对QRS进行滤波, dat_smo为完整工频干扰滤波后的波形
    merge_bwr = bwr(dat_merge, lin_seg, fs);      % 对包含原始QRS波形和将QRS进行滤波的波形都进行基线漂移滤波
    smo_bwr = bwr(dat_smo, lin_seg, fs);          % 滤波结束, dat_smo, merge_bwr, smo_bwr均可作为滤波后的数据
   
    dat_proc = smo_bwr;
    Ton_Toff = 0;
    [feature_one,wave_num_one,all_point] = feature_extraction(dat_proc,qrs_on,qrs_off,qrs_num,T,Ton_Toff);
    
    size(feature_one,1)
    num_train(class) = round(7 * size(feature_one,1) / 10);
    num_val(class) = round(1.5 * size(feature_one,1) / 10);
    num_test(class) = size(feature_one,1) - num_train(class) - num_val(class);
    
    morph_feature_train = [morph_feature_train;feature_one(1:num_train(class),:)];  % store the morphological parameters
    morph_feature_val = [morph_feature_val;feature_one(num_train(class)+1:num_train(class)+num_val(class),:)];
    morph_feature_test = [morph_feature_test;feature_one(num_train(class)+num_val(class)+1:end,:)];
    
    morph_class_train = [morph_class_train;ones(num_train(class),1)*class];
    morph_class_val = [morph_class_val;ones(num_val(class),1)*class];
    morph_class_test = [morph_class_test;ones(num_test(class),1)*class];
    
%     figure    
% %     plot(TIME(P),X1(P),'o')
%     plot(TIME(merge_qrs_t(:,1)),raws(merge_qrs_t(:,1)),'r*')
%     hold on
%     plot(TIME(merge_qrs_t(:,2)),raws(merge_qrs_t(:,2)),'ro')
%     plot(TIME(merge_qrs_t(:,3)),raws(merge_qrs_t(:,3)),'r^')
%     plot(TIME,raws,'b');
%     xlim([TIME(1), TIME(end)]);  
%     grid on
    
    
    %滤波
%     [dens,~,~]=wden(raws,'heursure','s','mln',3,'sym8');  %wden-wthresh滤波
%     [swa2,swd2]=swt(dens,9,'sym8');    %对信号进行sym8的9层小波分解
%     swd22=swd2;
%     swd22(9, : )=0;  %将信号9尺度上的小波分解系数置零
%     dens2=iswt(swa2,swd22,'sym8');  %信号重构
%     % plot(dens2(1:3000))
% 
% 
%     %R波检测
%     [ca1,cd1]=dwt(dens2,'haar');  %对信号利用bior3.1进行3层分解
%     [ca2,cd2]=dwt(ca1,'haar'); 
%     [ca3,cd3]=dwt(ca2,'haar'); 
%     fcd3=-cd3;  %将cd3取反，用于求极小值
%     %寻找各个极值点
%     maxd=[];  %用来保存极大值数据
%     maxl=[];  %用来保存极大值位置
%     mind=[];  %用来保存极小值数据
%     minl=[];  %用来保存极小值位置
%     for i=1:16*8  %将数据分为16组，每组512个采样点
%         M(i)=max(cd3(((i-1)*512+1):i*512));  %M取该组数据里的最大值
%         N(i)=min(cd3(((i-1)*512+1):i*512));  %M取该组数据里的最小值
%         %求前两段极值平均值A1，A2
%         if(i==1)  %若为第一段，则以该段极值作为前两段极值平均值
%             A1(i)=M(i);  
%             A2(i)=N(i);
%         else if(i==2)  %若为第二段，则将第一段极值作为前两段极值平均值
%                 A1(i)=M(i-1);
%                 A2(i)=N(i-1);
%             else  %之后A1、A2分别保存前两段的极大值、极小值的平均值
%                 A1(i)=(M(i-1)+M(i-2))/2;
%                 A2(i)=(N(i-1)+N(i-2))/2;
%             end
%         end
%         %求阈值
%         S1(i)=(0.7*M(i)+0.3*A1(i))/4;  %极大值阈值
%         S2(i)=(0.7*N(i)+0.3*A2(i))/3;  %极小值阈值
%         %寻找符合条件的极值
%         [maxdt,maxlt]=findpeaks(cd3(((i-1)*512+1):i*512),'minpeakheight',S1(i)/2);  %以正常阈值的一半作为门限值，以便后面补偿漏检所用。将第i段数据的超过阈值的极大值临时保存在maxdt中，极大值位置临时保存在maxlt中，且位置为该峰值在截断后的数组中的位置
%         [mindt,minlt]=findpeaks(fcd3(((i-1)*512+1):i*512),'minpeakheight',-S2(i)/2);
%         %将该段的极值数据和位置添加到整体的数组中
%         [maxd]=[maxd,maxdt];
%         [maxl]=[maxl,maxlt+512*(i-1)]; %将峰值位置换算成在原数组中的位置
%         [mind]=[mind,-mindt];
%         [minl]=[minl,minlt+512*(i-1)];
%     end
%     %凑极值对
%     j=1;  %用于取极大值和极小值
%     sizemax=2;  %初始条件，使能够进入while循环，之后每个循环会重新求取数组长度
%     sizemin=2;
%     while(j<=(min(sizemax,sizemin)-1))  %当极小值或极大值到最后第二个时，停止循环，因为下面会用到j+1 
%         if(abs(minl(j)-maxl(j))>9)  %原信号采样率为360HZ，72个点的时间间隔为200s，在第3层细节系数上，点数为原来的1/8，即9点
%             if(minl(j)>maxl(j));  %极大值在前面，为孤立点
%                 maxd(j)=[];  %舍弃孤立极值点
%                 maxl(j)=[];
%             else  %极小值为孤立点
%                 mind(j)=[];
%                 minl(j)=[];
%             end
%         else
%             %判断是否存在1个极小值周围有两个极大值的情况
%             if(abs(maxl(j+1)-maxl(j))<9)  %即在极小值的200ms距离内有两个极大值
%                 l1=abs(maxl(j)-minl(j));
%                 l2=abs(maxl(j+1)-minl(j));
%                 if(maxd(j)/l1>1.2*maxd(j+1)/l2)  %j+1点为多余极值点
%                     maxd(j+1)=[];
%                     maxl(j+1)=[];
%                 else if(maxd(j+1)/l2>1.2*maxd(j)/l1)  %j点为多余极值点
%                         maxd(j)=[];
%                         maxl(j)=[];
%                     else if(maxl(j+1)<minl(j))  %上面两条都不符合，且两个极大值位于极小值的左侧
%                             maxd(j)=[];
%                             maxl(j)=[];
%                         else  %上面两条都不符合，且两个极大值位于极小值的右侧或分别位于极小值的两侧
%                             maxd(j+1)=[];
%                             maxl(j+1)=[];
%                         end
%                     end
%                 end
%             %判断是否存在1个极大值周围有2个极小值的情况
%             else if(abs(minl(j+1)-minl(j))<9)  %即在极大值的200ms距离内有两个极小值
%                 l1=abs(minl(j)-maxl(j));
%                 l2=abs(minl(j+1)-maxl(j));
%                 if(abs(mind(j)/l1)>abs(1.2*mind(j+1)/l2))  %j+1点为多余极值点
%                     mind(j+1)=[];
%                     minl(j+1)=[];
%                 else if(abs(mind(j+1)/l2)>abs(1.2*mind(j)/l1))  %j点为多余极值点
%                         mind(j)=[];
%                         minl(j)=[];
%                     else if(minl(j+1)<maxl(j))  %上面两条都不符合，且两个极小值位于极大值的左侧
%                             mind(j)=[];
%                             minl(j)=[];
%                         else  %上面两条都不符合，且两个极小值位于极大值的右侧或分别位于极大值的两侧
%                             mind(j+1)=[];
%                             minl(j+1)=[];
%                         end
%                     end
%                 end
%                 %两个极值点既在200ms内，又无第3个极值点
%                 else
%                     j=j+1;  %第j的极大值和极小值构成一对极值对
%                 end
%             end
%         end
%         %数组长度每次在改变，所以每个循环要重新求取
%         sizemax=length(maxd);  %max的长度
%         sizemin=length(mind);  %max的长度 
%     end
%     %删除未凑成极值对的极值
%     maxd(j:sizemax)=[];
%     maxl(j:sizemax)=[];
%     mind(j:sizemin)=[];
%     minl(j:sizemin)=[];
%     %找到极值对间的过零点
%     n=1;  %用于记录小于阈值的零点
%     m=1;  %用于记录大于阈值的零点
%     for k=1:(j-1)  %遍历每一对极值对，并修正时移，得到R峰位置
%         u=cd3(maxl(k))-cd3(minl(k));
%         v=cd3(minl(k)) + minl(k)*cd3(minl(k)) - minl(k)*cd3(maxl(k));  %求出过点(minl(k),cd3(minl(k)))，((maxl(k),cd3(maxl(k)))两点的方程y=u*x+v，u，v表达式的解得见方法整理
%         if((maxd(k)<S1(ceil(k/512)))||(mind(k)>S2(ceil(k/512))))  %当正负极值中有未超过正常阈值时
%             zeroi(n)=-v/u;  %记录小于阈值的零点位置,解出y=u*x+v的过零点，表达式的解得见方法整理
%             n=n+1;
%         else
%             zero(m)=-v/u;  %记录大于阈值的零点位置
%             m=m+1;
%         end
%     end
%     m=m-1;
%     n=n-1;  %最后一次的m，n没有零点存入，予以减去
%     %检查漏检
%     for k=2:m
%         %求RR间期均值
%         if(k==2)  %k=2时，为前一个RR间期
%             meanrr=zero(k)-zero(k-1);
%         else if(k==3)  %k=3时，为前两个RR间期均值
%                 meanrr=((zero(k)-zero(k-1))+(zero(k-1)-zero(k-2)))/2;
%             else
%                 meanrr=((zero(k)-zero(k-1))+(zero(k-1)-zero(k-2))+(zero(k-2)-zero(k-3)))/3;  %之后，为前三个RR间期均值
%             end
%         end
%         if(((zero(k+1)-zero(k))>1.5*meanrr)||(zero(k+1)-zero(k))>46.625)  %相邻零点大于RR间期均值的1.5倍或大于1s（1s为在原信号上为365个点，在这应处以8）
%             for l=1:n  %插入zero(k)和zero(k+1)之间所有备用零点
%                 if((zeroi(l)>zero(k))&&(zeroi(l)<zero(k+1)))  %如果在这两点之间有备用零点
%                     zero=[zero(1:k),zeroi(l),zero(k+1:m)];  %将备用零点插入
%                     m=m+1;  %插入后，零点个数增加
%                 end
%             end
%         end
%     end
%     %修正R峰位置
%     for k=1:m
%         rl1(k)=zero(k)*8;  %乘以8为修正时移，将数据所在的位置序号转换为原数据上的序号，得到R峰位置
%     end
%     %小范围时移修正
%     for k=1:m
%         [ra(k),rl2(k)]=max(dens2(max(round(rl1(k)-27),1):round(rl1(k)+27)));  %在找到的R峰前后150ms（54个点）范围内寻找最大值点，即为R峰，幅值保存在ra（k）中，位置保存在rl（k）中。max(round(rl(k)-27),1)是为了防止减去27后为非正数。
%         rl3(k)=rl2(k)+max(round(rl1(k)-27),1)-1;
%     end
%     %将R峰位置转换为时间
%     for k=1:m
%         rlt(k)=rl3(k)/360;
%     end
%     %计算R峰检测率
%     %找到第一个检测到的点
%     for p=1:10
%         if(abs(ATRTIMED(p)-rlt(1))<0.01)
%             break;
%         end
%     end
%     q=0;  %保存漏检的R峰个数
%     for k=1:100  %检测100个R峰的检测率
%         for l=0:10  %在上一个点往下10个点内寻找匹配点，这里会循环11次，在第11个点找到也算漏检
%             if(abs(ATRTIMED(p+k-1)-rlt(k-q+l))<0.01)  %ATRTIMED取值要加上p-1，rlt取值要减去漏检的个数，在利用l循环
%                 error(k)=abs(ATRTIMED(p+k-1)-rlt(k-q+l)); %找到匹配的点后，求出误差绝对值
%                 break;  %跳出循环，不在继续寻找
%             end
%         end
%         if(l==10)  %说明循环正常结束，且未找到匹配点或在第11个点找到匹配点（这种情况在实际中几乎不存在）
%             q=q+1;
%         end
%     end
%     errorm=mean(error);  %求出检测到的点偏差绝对值的均值
% 
%     %求出用于显示的零点个数
%     % for k=1:m
%     %     if(rl3(k)>50000) 
%     %         break;
%     %     end
%     % end
%     for k=1:m
%         if(rl3(k)>10000) 
%             break;
%         end
%     end
%     % subplot(2,1,1),plot(dens2(1:50000),'b');hold on;plot(rl3(1:(k-1)),ra(1:(k-1)),'r*');hold off;title('原始信号')    %原始信号图
%     if class<6
%         subplot(5,1,class)
%         plot(dens2(1:10000),'b');hold on;plot(rl3(1:(k-1)),ra(1:(k-1)),'r*');hold off;    %原始信号图
%         xlabel('Num');
%         ylabel('Voltage/mv');
%         grid on
%     end
%     % figure
%     % plot(cd3(1:270),'b');title('第3层细节系数')    %滤波后的信号图
% 
% 
%     % RR峰值间为一个周期，峰值间距求平均值和方差  
%     dt = rl3(2:m)-rl3(1:m-1);  
%     Th = mean(dt)*1.2;%峰值间距阈值 
%     j=1;
%     n=size(dt,2);
%     clear a b
%     for i=1:n  % rl3的长度
%       if dt(i)<0 
%           break
%       end
%       if dt(i)<Th && dt(i)>0   % 如果相差大于阈值，视为不是一个心电周期
%           a(j,:)=my_resample(dens2(rl3(i):round((rl3(i+1)-rl3(i))*1.1+rl3(i))));
%           j=j+1;
%       end
%     end
%     % 在a的最后一列加上标签1-10,然后将每个人的数据按行并在一起
%     m = size(a,1);
% %     for i=1:m  % a的长度
% %         b(i,1)=class;
% %     end
% %     tmpa =[a b];
%     tmpa = [a,repmat(class,m,1)];
%     tmpa_len = size(tmpa,1);
%     class_train(1000*class-999:1000*class,:) = tmpa(1:1000,:);
%     class_val = [class_val;tmpa(1001:round((tmpa_len-1000)/2)+1000,:)];
%     class_test = [class_test;tmpa(round((tmpa_len-1000)/2)+1001:end,:)];
%     num_train(class) = 1000;
%     num_val(class) = round((tmpa_len-1000)/2);
%     num_test(class) = length(tmpa) - 1000 - round((tmpa_len-1000)/2);
end
morph_feature_train = [morph_feature_train,morph_class_train];
morph_feature_val = [morph_feature_val,morph_class_val];
morph_feature_test = [morph_feature_test,morph_class_test];
save('MIT_BIH_data_morph.mat','morph_feature_train','morph_feature_val','morph_feature_test','morph_class_train','morph_class_val','morph_class_test');
% train = randperm(size(class_train,1));   %生成关于行数的随机排列行数序列
% val = randperm(size(class_val,1));
% test = randperm(size(class_test,1));
% MIT_BIH_data_train = class_train(train,:);      %根据这个序列对A进行重新排序
% MIT_BIH_data_val = class_val(val,:);
% MIT_BIH_data_test = class_test(test,:);
% disp('$> Saving the train, validation and test dataset...');
% save('MIT_BIH_data.mat','MIT_BIH_data_train','MIT_BIH_data_val','MIT_BIH_data_test','num_train','num_val','num_test');
% disp('$> Done!');